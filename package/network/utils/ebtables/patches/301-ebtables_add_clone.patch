Index: ebtables-2018-06-27-48cff25d/extensions/ebt_nat.c
===================================================================
--- ebtables-2018-06-27-48cff25d.orig/extensions/ebt_nat.c
+++ ebtables-2018-06-27-48cff25d/extensions/ebt_nat.c
@@ -25,6 +25,10 @@ static int to_source_supplied, to_dest_s
 #define NAT_M_AGEING '1'
 #define NAT_M_TARGET '2'
 
+#define NAT_C_SRCMAC '1'
+#define NAT_C_DSTMAC '2'
+#define NAT_C_TARGET '3'
+
 static const struct option opts_s[] =
 {
 	{ "to-source"     , required_argument, 0, NAT_S },
@@ -49,6 +53,14 @@ static struct option opts_m[] =
        { 0 }
 };
 
+static struct option opts_c[] =
+{
+       { "clone-src"           , required_argument, 0, NAT_C_SRCMAC },
+       { "clone-dst"           , required_argument, 0, NAT_C_DSTMAC },
+       { "clone-target"        , required_argument, 0, NAT_C_TARGET },
+       { 0 }
+};
+
 static void print_help_s()
 {
 	printf(
@@ -74,6 +86,15 @@ static void print_help_m()
        " --masq-target target   : ACCEPT, DROP, RETURN or CONTINUE\n");
 }
 
+static void print_help_c()
+{
+       printf(
+       "clone options:\n"
+       " --clone-src                           : source MAC address to be cloned\n"
+       " --clone-dst                           : destination MAC address to be cloned\n"
+       " --clone-target target         : ACCEPT, DROP, RETURN or CONTINUE\n");
+}
+
 static void init_s(struct ebt_entry_target *target)
 {
 	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
@@ -101,6 +122,16 @@ static void init_m(struct ebt_entry_targ
        return;
 }
 
+static void init_c(struct ebt_entry_target *target)
+{
+       struct ebt_clone_info *cloneinfo = (struct ebt_clone_info *)target->data;
+
+       to_source_supplied = 0;
+       to_dest_supplied = 0;
+       cloneinfo->target = EBT_CONTINUE;
+       return;
+}
+
 #define OPT_SNAT         0x01
 #define OPT_SNAT_TARGET  0x02
 #define OPT_SNAT_ARP     0x04
@@ -200,6 +231,51 @@ static int parse_m(int c, char **argv, i
         return 1;
 }
 
+#define OPT_CLONE_SRCMAC  0x01
+#define OPT_CLONE_DSTMAC  0x02
+#define OPT_CLONE_TARGET  0x04
+static int parse_c(int c, char **argv, int argc,
+                       const struct ebt_u_entry *entry, unsigned int *flags,
+                       struct ebt_entry_target **target)
+{
+       struct ebt_clone_info *cloneinfo = (struct ebt_clone_info *)(*target)->data;
+       unsigned int num;
+       struct ether_addr *addr;
+
+       switch (c) {
+               case NAT_C_SRCMAC:
+               {
+                       ebt_check_option2(flags, OPT_CLONE_SRCMAC);
+                       to_source_supplied = 1;
+                       if (!(addr = ether_aton(optarg)))
+                               ebt_print_error2("Problem with specified --to-source mac");
+                       memcpy(cloneinfo->src_mac, addr, ETH_ALEN);
+                       break;
+               }
+               case NAT_C_DSTMAC:
+               {
+                       ebt_check_option2(flags, OPT_CLONE_DSTMAC);
+                       to_dest_supplied = 1;
+                       if (!(addr = ether_aton(optarg)))
+                               ebt_print_error2("Problem with specified --to-destination mac");
+                       memcpy(cloneinfo->dst_mac, addr, ETH_ALEN);
+                       break;
+               }
+               case NAT_C_TARGET:
+               {
+                       int tmp;
+                       ebt_check_option2(flags, OPT_CLONE_TARGET);
+                       if (FILL_TARGET(optarg, tmp))
+                               ebt_print_error2("Illegal --clone-target target");
+                       cloneinfo->target = (cloneinfo->target & ~EBT_VERDICT_BITS) | (tmp & EBT_VERDICT_BITS);
+               }
+               break;
+        default:
+                return 0;
+        }
+        return 1;
+}
+
 
 static void final_check_s(const struct ebt_u_entry *entry,
    const struct ebt_entry_target *target, const char *name,
@@ -254,6 +330,23 @@ static void final_check_m(const struct e
        }
 }
 
+static void final_check_c(const struct ebt_u_entry *entry,
+   const struct ebt_entry_target *target, const char *name,
+   unsigned int hookmask, unsigned int time)
+{
+       struct ebt_clone_info *cloneinfo = (struct ebt_clone_info *)target->data;
+
+       if (BASE_CHAIN && cloneinfo->target == EBT_RETURN) {
+               ebt_print_error("--clone-target RETURN not allowed on base chain");
+               return;
+       }
+       CLEAR_BASE_CHAIN_BIT;
+       if (hookmask & ~((1 << NF_BR_PRE_ROUTING) | (1 << NF_BR_POST_ROUTING))
+            || strcmp(name, "nat")) {
+               ebt_print_error("Wrong chain for clone");
+       }
+}
+
 
 static void print_s(const struct ebt_u_entry *entry,
    const struct ebt_entry_target *target)
@@ -286,6 +379,19 @@ static void print_m(const struct ebt_u_e
        TARGET_NAME(masqinfo->target));
 }
 
+static void print_c(const struct ebt_u_entry *entry,
+                   const struct ebt_entry_target *target)
+{
+       struct ebt_clone_info *cloneinfo = (struct ebt_masq_info *)target->data;
+
+       printf("--clone-src ");
+       ebt_print_mac(cloneinfo->src_mac);
+       printf(" --clone-dst ");
+       ebt_print_mac(cloneinfo->dst_mac);
+
+       printf(" --clone-target %s", TARGET_NAME(cloneinfo->target));
+}
+
 static int compare(const struct ebt_entry_target *t1,
    const struct ebt_entry_target *t2)
 {
@@ -305,6 +411,17 @@ static int compare_m(const struct ebt_en
        return masqinfo1->ageing_time == masqinfo2->ageing_time && masqinfo1->target == masqinfo2->target;
 }
 
+static int compare_c(const struct ebt_entry_target *t1,
+   const struct ebt_entry_target *t2)
+{
+       struct ebt_clone_info *cloneinfo1 = (struct ebt_masq_info *)t1->data;
+       struct ebt_clone_info *cloneinfo2 = (struct ebt_masq_info *)t2->data;
+
+       return !memcmp(cloneinfo1->src_mac, cloneinfo2->src_mac, sizeof(cloneinfo1->src_mac)) &&
+                       !memcmp(cloneinfo1->dst_mac, cloneinfo2->dst_mac, sizeof(cloneinfo1->dst_mac)) &&
+                       cloneinfo1->target == cloneinfo2->target;
+}
+
 static struct ebt_u_target snat_target =
 {
 	.name		= "snat",
@@ -344,10 +461,23 @@ static struct ebt_u_target masq_target =
        .extra_ops      = opts_m,
 };
 
+static struct ebt_u_target clone_target =
+{
+       .name           = "clone",
+       .size           = sizeof(struct ebt_clone_info),
+       .help           = print_help_c,
+       .init           = init_c,
+       .parse          = parse_c,
+       .final_check    = final_check_c,
+       .print          = print_c,
+       .compare        = compare_c,
+       .extra_ops      = opts_c,
+};
 
 __attribute__((constructor)) static void extension_init(void)
 {
 	ebt_register_target(&snat_target);
 	ebt_register_target(&dnat_target);
 	ebt_register_target(&masq_target);
+	ebt_register_target(&clone_target);
 }
Index: ebtables-2018-06-27-48cff25d/include/linux/netfilter_bridge/ebt_nat.h
===================================================================
--- ebtables-2018-06-27-48cff25d.orig/include/linux/netfilter_bridge/ebt_nat.h
+++ ebtables-2018-06-27-48cff25d/include/linux/netfilter_bridge/ebt_nat.h
@@ -16,4 +16,12 @@ struct ebt_masq_info {
 };
 #define EBT_MASQ_TARGET "masq"
 
+struct ebt_clone_info {
+       unsigned char src_mac[ETH_ALEN];
+       unsigned char dst_mac[ETH_ALEN];
+       int target;      /* EBT_ACCEPT, EBT_DROP, EBT_CONTINUE or EBT_RETURN */
+};
+#define EBT_CLONE_TARGET "clone"
+
+
 #endif
